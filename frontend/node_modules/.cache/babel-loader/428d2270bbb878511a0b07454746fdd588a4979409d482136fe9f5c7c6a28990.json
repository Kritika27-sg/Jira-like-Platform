{"ast":null,"code":"var _jsxFileName = \"/home/kritika/Documents/project/frontend/src/components/auth/Login.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { useAuth } from '../../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = '1080816176181-p23c90520lrbhc1blep9q4pak6j14ei3.apps.googleusercontent.com';\nconst Login = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const handleSuccess = async credentialResponse => {\n    const googleToken = credentialResponse.credential;\n\n    // Send the credential (Google ID token) to your backend for verification / login\n    try {\n      const res = await fetch(`http://localhost:8000/auth/google/callback?token=${googleToken}`);\n      if (!res.ok) throw new Error('Login failed');\n      const data = await res.json();\n\n      // {\n      //   user: { id, email, full_name, role },\n      //   access_token: \"your_jwt_token\"\n      // }\n\n      // Store user info and token securely\n      login(data.user);\n      localStorage.setItem('jira-token', data.access_token);\n    } catch (error) {\n      alert('Authentication failed: ' + error.message);\n    }\n  };\n  const handleError = () => {\n    alert('Google login failed');\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: clientId,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: 400,\n        margin: 'auto',\n        padding: 20,\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleSuccess,\n        onError: handleError,\n        useOneTap: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"UHkfWqKqWotCJBriqTc0XaXAMSw=\", false, function () {\n  return [useAuth];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","GoogleOAuthProvider","GoogleLogin","useAuth","jsxDEV","_jsxDEV","clientId","Login","_s","login","handleSuccess","credentialResponse","googleToken","credential","res","fetch","ok","Error","data","json","user","localStorage","setItem","access_token","error","alert","message","handleError","children","style","maxWidth","margin","padding","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","useOneTap","_c","$RefreshReg$"],"sources":["/home/kritika/Documents/project/frontend/src/components/auth/Login.js"],"sourcesContent":["import React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { useAuth } from '../../context/AuthContext';\n\nconst clientId = '1080816176181-p23c90520lrbhc1blep9q4pak6j14ei3.apps.googleusercontent.com';\n\nconst Login = () => {\n  const { login } = useAuth();\n\n  const handleSuccess = async (credentialResponse) => {\n    const googleToken = credentialResponse.credential;\n\n    // Send the credential (Google ID token) to your backend for verification / login\n    try {\n      const res = await fetch(`http://localhost:8000/auth/google/callback?token=${googleToken}`);\n      if (!res.ok) throw new Error('Login failed');\n\n      const data = await res.json();\n\n      // {\n      //   user: { id, email, full_name, role },\n      //   access_token: \"your_jwt_token\"\n      // }\n\n      // Store user info and token securely\n      login(data.user);\n      localStorage.setItem('jira-token', data.access_token);\n\n    } catch (error) {\n      alert('Authentication failed: ' + error.message);\n    }\n  };\n\n  const handleError = () => {\n    alert('Google login failed');\n  };\n\n  return (\n    <GoogleOAuthProvider clientId={clientId}>\n      <div style={{ maxWidth: 400, margin: 'auto', padding: 20, textAlign: 'center' }}>\n        <h2>Login with Google</h2>\n        <GoogleLogin\n          onSuccess={handleSuccess}\n          onError={handleError}\n          useOneTap\n        />\n      </div>\n    </GoogleOAuthProvider>\n  );\n};\n\nexport default Login;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,qBAAqB;AACtE,SAASC,OAAO,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,QAAQ,GAAG,2EAA2E;AAE5F,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM;IAAEC;EAAM,CAAC,GAAGN,OAAO,CAAC,CAAC;EAE3B,MAAMO,aAAa,GAAG,MAAOC,kBAAkB,IAAK;IAClD,MAAMC,WAAW,GAAGD,kBAAkB,CAACE,UAAU;;IAEjD;IACA,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,oDAAoDH,WAAW,EAAE,CAAC;MAC1F,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MAE5C,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;;MAE7B;MACA;MACA;MACA;;MAEA;MACAV,KAAK,CAACS,IAAI,CAACE,IAAI,CAAC;MAChBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEJ,IAAI,CAACK,YAAY,CAAC;IAEvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,KAAK,CAAC,yBAAyB,GAAGD,KAAK,CAACE,OAAO,CAAC;IAClD;EACF,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBF,KAAK,CAAC,qBAAqB,CAAC;EAC9B,CAAC;EAED,oBACEpB,OAAA,CAACJ,mBAAmB;IAACK,QAAQ,EAAEA,QAAS;IAAAsB,QAAA,eACtCvB,OAAA;MAAKwB,KAAK,EAAE;QAAEC,QAAQ,EAAE,GAAG;QAAEC,MAAM,EAAE,MAAM;QAAEC,OAAO,EAAE,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAL,QAAA,gBAC9EvB,OAAA;QAAAuB,QAAA,EAAI;MAAiB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BhC,OAAA,CAACH,WAAW;QACVoC,SAAS,EAAE5B,aAAc;QACzB6B,OAAO,EAAEZ,WAAY;QACrBa,SAAS;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE1B,CAAC;AAAC7B,EAAA,CA3CID,KAAK;EAAA,QACSJ,OAAO;AAAA;AAAAsC,EAAA,GADrBlC,KAAK;AA6CX,eAAeA,KAAK;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}