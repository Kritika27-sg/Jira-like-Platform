{"ast":null,"code":"var _jsxFileName = \"/home/kritika/Documents/project/frontend/src/components/comments/CommentList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { getCommentsForTask, createComment } from '../../api/commentService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentList = ({\n  taskId\n}) => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [creating, setCreating] = useState(false);\n  const loadComments = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await getCommentsForTask(taskId, localStorage.getItem('jira-token'));\n      setComments(data);\n    } catch (err) {\n      alert(err.message);\n    }\n    setLoading(false);\n  }, [taskId]);\n  useEffect(() => {\n    if (taskId) loadComments();\n  }, [taskId]);\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n    setCreating(true);\n    try {\n      await createComment({\n        content: newComment,\n        task_id: taskId\n      }, localStorage.getItem('jira-token'));\n      setNewComment('');\n      loadComments();\n    } catch (err) {\n      alert(err.message);\n    }\n    setCreating(false);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading comments...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        maxHeight: 200,\n        overflowY: 'auto'\n      },\n      children: comments.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: c.user_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), \": \", c.content]\n      }, c.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), (user.role === 'Admin' || user.role === 'Project Manager' || user.role === 'Developer' || user.role === 'Client') && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Add a comment\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        rows: 3,\n        style: {\n          width: '100%',\n          marginTop: 10\n        },\n        disabled: creating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: creating || !newComment.trim(),\n        style: {\n          marginTop: 5\n        },\n        children: \"Post Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentList, \"NgBMWv7FJA6FUUEbq4GTH5TnUq0=\", false, function () {\n  return [useAuth];\n});\n_c = CommentList;\nexport default CommentList;\nvar _c;\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useAuth","getCommentsForTask","createComment","jsxDEV","_jsxDEV","CommentList","taskId","_s","user","comments","setComments","newComment","setNewComment","loading","setLoading","creating","setCreating","loadComments","data","localStorage","getItem","err","alert","message","handleCommentSubmit","e","preventDefault","trim","content","task_id","children","fileName","_jsxFileName","lineNumber","columnNumber","style","maxHeight","overflowY","map","c","user_id","id","role","onSubmit","placeholder","value","onChange","target","rows","width","marginTop","disabled","type","_c","$RefreshReg$"],"sources":["/home/kritika/Documents/project/frontend/src/components/comments/CommentList.js"],"sourcesContent":["import React, { useEffect, useState, useCallback} from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { getCommentsForTask, createComment } from '../../api/commentService';\n\nconst CommentList = ({ taskId }) => {\n  const { user } = useAuth();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [creating, setCreating] = useState(false);\n\n  const loadComments = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await getCommentsForTask(taskId, localStorage.getItem('jira-token'));\n      setComments(data);\n    } catch (err) {\n      alert(err.message);\n    }\n    setLoading(false);\n  },[taskId]);\n\n  useEffect(() => {\n    if (taskId) loadComments();\n  }, [taskId]);\n\n  const handleCommentSubmit = async (e) => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n    setCreating(true);\n    try {\n      await createComment(\n        { content: newComment, task_id: taskId },\n        localStorage.getItem('jira-token')\n      );\n      setNewComment('');\n      loadComments();\n    } catch (err) {\n      alert(err.message);\n    }\n    setCreating(false);\n  };\n\n  if (loading) return <div>Loading comments...</div>;\n\n  return (\n    <div>\n      <h3>Comments</h3>\n      <ul style={{ maxHeight: 200, overflowY: 'auto' }}>\n        {comments.map((c) => (\n          <li key={c.id}>\n            <b>{c.user_id}</b>: {c.content}\n          </li>\n        ))}\n      </ul>\n\n      {(user.role === 'Admin' || user.role === 'Project Manager' || user.role === 'Developer' || user.role === 'Client') && (\n        <form onSubmit={handleCommentSubmit}>\n          <textarea\n            placeholder=\"Add a comment\"\n            value={newComment}\n            onChange={e => setNewComment(e.target.value)}\n            rows={3}\n            style={{ width: '100%', marginTop: 10 }}\n            disabled={creating}\n          />\n          <button type=\"submit\" disabled={creating || !newComment.trim()} style={{ marginTop: 5 }}>\n            Post Comment\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default CommentList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}