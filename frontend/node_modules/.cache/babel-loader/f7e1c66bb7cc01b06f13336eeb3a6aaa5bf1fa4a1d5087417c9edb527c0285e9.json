{"ast":null,"code":"var _jsxFileName = \"/home/kritika/Documents/project/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // { id, email, full_name, role }\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('jira-user');\n    const storedToken = localStorage.getItem('jira-token');\n    if (storedUser && storedToken) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        console.log('Loaded user from localStorage:', parsedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        // Clear corrupted data\n        localStorage.removeItem('jira-user');\n        localStorage.removeItem('jira-token');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async credentials => {\n    try {\n      console.log('Login function called with:', credentials);\n\n      // If credentials is already a user object (from Google login or direct call), use it directly\n      if (credentials.id && credentials.email) {\n        console.log('Direct user login (Google or registration):', credentials);\n        setUser(credentials);\n        localStorage.setItem('jira-user', JSON.stringify(credentials));\n        console.log('User state updated, localStorage updated');\n        return credentials;\n      }\n\n      // Otherwise, it's email/password login\n      console.log('Email/password login attempt');\n      const response = await fetch('http://localhost:8000/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: credentials.email,\n          password: credentials.password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Login failed');\n      }\n      const data = await response.json();\n      console.log('Login API successful:', data.user);\n\n      // Store user data and token\n      setUser(data.user);\n      localStorage.setItem('jira-user', JSON.stringify(data.user));\n      localStorage.setItem('jira-token', data.access_token);\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await fetch('http://localhost:8000/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          full_name: userData.full_name || userData.name,\n          email: userData.email,\n          password: userData.password,\n          role: userData.role\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Registration failed');\n      }\n      const data = await response.json();\n      console.log('User registered:', data.user);\n\n      // Automatically log in the user after successful registration\n      setUser(data.user);\n      localStorage.setItem('jira-user', JSON.stringify(data.user));\n      localStorage.setItem('jira-token', data.access_token);\n      return data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    console.log('User logged out');\n    setUser(null);\n    localStorage.removeItem('jira-user');\n    localStorage.removeItem('jira-token');\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return user !== null && localStorage.getItem('jira-token') !== null;\n  };\n\n  // Get the current token\n  const getToken = () => {\n    return localStorage.getItem('jira-token');\n  };\n\n  // Validate token and refresh user data if needed\n  const validateToken = async () => {\n    const token = getToken();\n    if (!token) {\n      logout();\n      return false;\n    }\n    try {\n      return true;\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      logout();\n      return false;\n    }\n  };\n  const contextValue = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n    isAuthenticated,\n    getToken,\n    validateToken,\n    // Keep signUp for backward compatibility\n    signUp: register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","storedUser","localStorage","getItem","storedToken","parsedUser","JSON","parse","console","log","error","removeItem","login","credentials","id","email","setItem","stringify","response","fetch","method","headers","body","password","ok","errorData","json","Error","detail","data","access_token","register","userData","full_name","name","role","logout","isAuthenticated","getToken","validateToken","token","contextValue","signUp","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/home/kritika/Documents/project/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // { id, email, full_name, role }\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('jira-user');\n    const storedToken = localStorage.getItem('jira-token');\n    \n    if (storedUser && storedToken) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        console.log('Loaded user from localStorage:', parsedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        // Clear corrupted data\n        localStorage.removeItem('jira-user');\n        localStorage.removeItem('jira-token');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      console.log('Login function called with:', credentials);\n      \n      // If credentials is already a user object (from Google login or direct call), use it directly\n      if (credentials.id && credentials.email) {\n        console.log('Direct user login (Google or registration):', credentials);\n        setUser(credentials);\n        localStorage.setItem('jira-user', JSON.stringify(credentials));\n        console.log('User state updated, localStorage updated');\n        return credentials;\n      }\n\n      // Otherwise, it's email/password login\n      console.log('Email/password login attempt');\n      const response = await fetch('http://localhost:8000/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: credentials.email,\n          password: credentials.password\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Login failed');\n      }\n\n      const data = await response.json();\n      console.log('Login API successful:', data.user);\n      \n      // Store user data and token\n      setUser(data.user);\n      localStorage.setItem('jira-user', JSON.stringify(data.user));\n      localStorage.setItem('jira-token', data.access_token);\n      \n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await fetch('http://localhost:8000/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          full_name: userData.full_name || userData.name,\n          email: userData.email,\n          password: userData.password,\n          role: userData.role\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Registration failed');\n      }\n\n      const data = await response.json();\n      console.log('User registered:', data.user);\n\n      // Automatically log in the user after successful registration\n      setUser(data.user);\n      localStorage.setItem('jira-user', JSON.stringify(data.user));\n      localStorage.setItem('jira-token', data.access_token);\n\n      return data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    console.log('User logged out');\n    setUser(null);\n    localStorage.removeItem('jira-user');\n    localStorage.removeItem('jira-token');\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return user !== null && localStorage.getItem('jira-token') !== null;\n  };\n\n  // Get the current token\n  const getToken = () => {\n    return localStorage.getItem('jira-token');\n  };\n\n  // Validate token and refresh user data if needed\n  const validateToken = async () => {\n    const token = getToken();\n    if (!token) {\n      logout();\n      return false;\n    }\n\n    try {\n      return true;\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      logout();\n      return false;\n    }\n  };\n\n  const contextValue = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n    isAuthenticated,\n    getToken,\n    validateToken,\n    // Keep signUp for backward compatibility\n    signUp: register\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}