{"ast":null,"code":"var _jsxFileName = \"/home/kritika/Documents/project/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // { id, email, full_name, role }\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('jira-user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      console.log('Loaded user from localStorage:', parsedUser);\n      setUser(parsedUser);\n    }\n    setLoading(false);\n  }, []);\n  const login = userData => {\n    setUser(userData);\n    localStorage.setItem('jira-user', JSON.stringify(userData));\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('jira-user');\n  };\n\n  // Sign up function to register new users\n  const signUp = async ({\n    name,\n    email,\n    password,\n    role\n  }) => {\n    try {\n      const response = await fetch('http://localhost:8000/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          full_name: name,\n          email,\n          password,\n          role\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Signup failed');\n      }\n      const data = await response.json();\n      console.log('User data after sign-up:', data.user);\n\n      // Automatically log in the user after successful sign-up\n      setUser(data.user); // Ensure data.user contains the correct role\n      localStorage.setItem('jira-user', JSON.stringify(data.user));\n\n      // Optionally, save access token if provided\n      if (data.access_token) {\n        localStorage.setItem('jira-token', data.access_token);\n      }\n      return data; // Return user data or any other relevant info\n    } catch (error) {\n      throw error; // Propagate error to be handled in the component\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      signUp,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to access AuthContext easily\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","storedUser","localStorage","getItem","parsedUser","JSON","parse","console","log","login","userData","setItem","stringify","logout","removeItem","signUp","name","email","password","role","response","fetch","method","headers","body","full_name","ok","errorData","json","Error","message","data","access_token","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/home/kritika/Documents/project/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null); // { id, email, full_name, role }\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('jira-user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      console.log('Loaded user from localStorage:', parsedUser);\n      setUser(parsedUser);\n    }\n    setLoading(false);\n  }, []);\n\n  const login = (userData) => {\n    setUser(userData);\n    localStorage.setItem('jira-user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('jira-user');\n  };\n\n  // Sign up function to register new users\n  const signUp = async ({ name, email, password, role }) => {\n    try {\n      const response = await fetch('http://localhost:8000/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ full_name: name, email, password, role }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Signup failed');\n      }\n\n      const data = await response.json();\n\n      console.log('User data after sign-up:', data.user);\n\n      // Automatically log in the user after successful sign-up\n      setUser(data.user); // Ensure data.user contains the correct role\n      localStorage.setItem('jira-user', JSON.stringify(data.user));\n\n      // Optionally, save access token if provided\n      if (data.access_token) {\n        localStorage.setItem('jira-token', data.access_token);\n      }\n\n      return data; // Return user data or any other relevant info\n    } catch (error) {\n      throw error; // Propagate error to be handled in the component\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, signUp, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook to access AuthContext easily\nexport const useAuth = () => useContext(AuthContext);\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}